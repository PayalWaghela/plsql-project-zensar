e-learning platform

-- creating tables

CREATE TABLE COURSES (
    COURSE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    COURSE_NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    DURATION NUMBER, -- Duration in hours
    CREATED_AT DATE DEFAULT SYSDATE
);

CREATE TABLE STUDENTS (
    STUDENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    REGISTERED_AT DATE DEFAULT SYSDATE
);

CREATE TABLE ENROLLMENTS (
    ENROLLMENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    COURSE_ID NUMBER REFERENCES COURSES(COURSE_ID),
    STUDENT_ID NUMBER REFERENCES STUDENTS(STUDENT_ID),
    ENROLLMENT_DATE DATE DEFAULT SYSDATE,
    UNIQUE (COURSE_ID, STUDENT_ID)
);

CREATE TABLE PROGRESS (
    PROGRESS_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STUDENT_ID NUMBER REFERENCES STUDENTS(STUDENT_ID),
    COURSE_ID NUMBER REFERENCES COURSES(COURSE_ID),
    COMPLETION_PERCENTAGE NUMBER(5, 2) DEFAULT 0 CHECK (COMPLETION_PERCENTAGE BETWEEN 0 AND 100),
    UPDATED_AT DATE DEFAULT SYSDATE
);

CREATE TABLE ASSESSMENTS (
    ASSESSMENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    STUDENT_ID NUMBER REFERENCES STUDENTS(STUDENT_ID),
    COURSE_ID NUMBER REFERENCES COURSES(COURSE_ID),
    SCORE NUMBER(5, 2),
    ASSESSMENT_DATE DATE DEFAULT SYSDATE
);

--creating procedures

CREATE OR REPLACE PACKAGE PKG_COURSE_MGMT AS
    PROCEDURE ADD_COURSE(COURSE_NAME VARCHAR2, DESCRIPTION VARCHAR2, DURATION NUMBER);
    PROCEDURE GET_COURSES;
END PKG_COURSE_MGMT;
/

CREATE OR REPLACE PACKAGE BODY PKG_COURSE_MGMT AS
    PROCEDURE ADD_COURSE(COURSE_NAME VARCHAR2, DESCRIPTION VARCHAR2, DURATION NUMBER) IS
    BEGIN
        INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION) 
        VALUES (COURSE_NAME, DESCRIPTION, DURATION);
    END;

    PROCEDURE GET_COURSES IS
    BEGIN
        FOR REC IN (SELECT * FROM COURSES) LOOP
            DBMS_OUTPUT.PUT_LINE(REC.COURSE_NAME || ' - ' || REC.DESCRIPTION);
        END LOOP;
    END;
END PKG_COURSE_MGMT;
/

CREATE OR REPLACE PACKAGE PKG_ENROLL_MGMT AS
    PROCEDURE ENROLL_STUDENT(COURSE_ID NUMBER, STUDENT_ID NUMBER);
    PROCEDURE GET_ENROLLED_STUDENTS(COURSE_ID NUMBER);
END PKG_ENROLL_MGMT;
/

CREATE OR REPLACE PACKAGE BODY PKG_ENROLL_MGMT AS
    PROCEDURE ENROLL_STUDENT(COURSE_ID NUMBER, STUDENT_ID NUMBER) IS
    BEGIN
        INSERT INTO ENROLLMENTS (COURSE_ID, STUDENT_ID) 
        VALUES (COURSE_ID, STUDENT_ID);
    END;

    PROCEDURE GET_ENROLLED_STUDENTS(COURSE_ID NUMBER) IS
    BEGIN
        FOR REC IN (SELECT S.NAME 
                    FROM STUDENTS S, ENROLLMENTS E 
                    WHERE S.STUDENT_ID = E.STUDENT_ID 
                    AND E.COURSE_ID = COURSE_ID) LOOP
            DBMS_OUTPUT.PUT_LINE(REC.NAME);
        END LOOP;
    END;
END PKG_ENROLL_MGMT;
/
CREATE OR REPLACE PACKAGE PKG_PROGRESS_MGMT AS
    PROCEDURE UPDATE_PROGRESS(STUDENT_ID NUMBER, COURSE_ID NUMBER, COMPLETION_PERCENTAGE NUMBER);
    PROCEDURE GET_PROGRESS(STUDENT_ID NUMBER, COURSE_ID NUMBER);
END PKG_PROGRESS_MGMT;
/

CREATE OR REPLACE PACKAGE BODY PKG_PROGRESS_MGMT AS
    PROCEDURE UPDATE_PROGRESS(STUDENT_ID NUMBER, COURSE_ID NUMBER, COMPLETION_PERCENTAGE NUMBER) IS
    BEGIN
        UPDATE PROGRESS 
        SET COMPLETION_PERCENTAGE = COMPLETION_PERCENTAGE, UPDATED_AT = SYSDATE 
        WHERE STUDENT_ID = STUDENT_ID AND COURSE_ID = COURSE_ID;
    END;

    PROCEDURE GET_PROGRESS(STUDENT_ID NUMBER, COURSE_ID NUMBER) IS
    BEGIN
        FOR REC IN (SELECT COMPLETION_PERCENTAGE, UPDATED_AT 
                    FROM PROGRESS 
                    WHERE STUDENT_ID = STUDENT_ID AND COURSE_ID = COURSE_ID) LOOP
            DBMS_OUTPUT.PUT_LINE('Progress: ' || REC.COMPLETION_PERCENTAGE || '% on ' || REC.UPDATED_AT);
        END LOOP;
    END;
END PKG_PROGRESS_MGMT;
/

--creating package

CREATE OR REPLACE PACKAGE PKG_ASSESSMENT_MGMT AS
    PROCEDURE ADD_ASSESSMENT(STUDENT_ID NUMBER, COURSE_ID NUMBER, SCORE NUMBER);
    PROCEDURE GET_ASSESSMENTS(STUDENT_ID NUMBER, COURSE_ID NUMBER);
END PKG_ASSESSMENT_MGMT;
/

CREATE OR REPLACE PACKAGE BODY PKG_ASSESSMENT_MGMT AS
    PROCEDURE ADD_ASSESSMENT(STUDENT_ID NUMBER, COURSE_ID NUMBER, SCORE NUMBER) IS
    BEGIN
        INSERT INTO ASSESSMENTS (STUDENT_ID, COURSE_ID, SCORE) 
        VALUES (STUDENT_ID, COURSE_ID, SCORE);
    END;

    PROCEDURE GET_ASSESSMENTS(STUDENT_ID NUMBER, COURSE_ID NUMBER) IS
    BEGIN
        FOR REC IN (SELECT SCORE, ASSESSMENT_DATE 
                    FROM ASSESSMENTS 
                    WHERE STUDENT_ID = STUDENT_ID AND COURSE_ID = COURSE_ID) LOOP
            DBMS_OUTPUT.PUT_LINE('Score: ' || REC.SCORE || ' on ' || REC.ASSESSMENT_DATE);
        END LOOP;
    END;
END PKG_ASSESSMENT_MGMT;
/

-- Insert sample courses

INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION) 
VALUES ('PL/SQL Basics', 'Learn PL/SQL programming', 20);

INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION) 
VALUES ('Advanced PL/SQL', 'Master advanced concepts of PL/SQL', 30);

-- Insert sample students
INSERT INTO STUDENTS (NAME, EMAIL) 
VALUES ('Alice', 'alice@example.com');

INSERT INTO STUDENTS (NAME, EMAIL) 
VALUES ('Bob', 'bob@example.com');

select * from STUDENTS;


-- Add a course
BEGIN
    PKG_COURSE_MGMT.ADD_COURSE('Database Design', 'Learn to design efficient databases', 25);
END;
/

-- Get all courses
BEGIN
    PKG_COURSE_MGMT.GET_COURSES;
END;
/

-- Enroll a student
BEGIN
    PKG_ENROLL_MGMT.ENROLL_STUDENT(1, 1); -- Enroll Alice in Course 1
END;
/

-- Get all enrolled students for a course
BEGIN
    PKG_ENROLL_MGMT.GET_ENROLLED_STUDENTS(1); -- Get students in Course 1
END;
/

-- Update progress
BEGIN
    PKG_PROGRESS_MGMT.UPDATE_PROGRESS(1, 1, 50); -- Update Alice's progress for Course 1
END;
/

-- Get progress for a student
BEGIN
    PKG_PROGRESS_MGMT.GET_PROGRESS(1, 1); -- Get Alice's progress for Course 1
END;
/

-- Add an assessment for a student
BEGIN
    PKG_ASSESSMENT_MGMT.ADD_ASSESSMENT(1, 1, 85); -- Add an assessment for Alice in Course 1
END;
/

-- Get assessments for a student
BEGIN
    PKG_ASSESSMENT_MGMT.GET_ASSESSMENTS(1, 1); -- Get assessments for Alice in Course 1
END;
/
